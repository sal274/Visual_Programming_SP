@page "/write"
@rendermode InteractiveServer

@using WriteOn.Components.Layout

@layout MainLayout

@using WriteOn.Models
@using WriteOn.Data

@inject WriteOnDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>write</PageTitle>

<head>
    <link href="css/writingpage.css" rel="stylesheet" />
</head>

<form>
    <div class="form-group">
        <label for="title">title</label>
        <input type="text" class="form-control" id="title" name="title" @bind="ArticleTitle" required>
    </div>
    <div class="form-group">
        <label for="content">content</label>
        <textarea class="form-control" id="content" name="content" rows="20" @bind="ArticleContent" @bind:event="oninput" required></textarea>
    </div>
    <button class="btn btn-primary" @onclick="PostArticle">post</button>
</form>

@code {
    public string ArticleTitle { get; set; } = string.Empty;
    public string ArticleContent { get; set; } = string.Empty;

    private void PostArticle()
    {
        if (String.IsNullOrEmpty(ArticleTitle) ||
                String.IsNullOrEmpty(ArticleContent))
        {
            return;
        }

        CurrentUserState? CurrentUserInfo = null;
        try
        {
            CurrentUserInfo = DbContext.UserState.FirstOrDefault();
        }
        catch (InvalidOperationException)
        {
            NavigationManager.NavigateTo("login");
            return;
        }

        if (CurrentUserInfo == null)
        {
            NavigationManager.NavigateTo("login");
            return;
        }

        DbContext.Articles.Add(new Models.Article
            {
                ArticleID = Guid.NewGuid().ToString(),
                AuthorUsername = CurrentUserInfo.Username,
                Title = ArticleTitle,
                Content = ArticleContent,
                PublishDate = DateTime.Today.ToString("d")
            }
        );
        DbContext.SaveChanges();
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "home", forceLoad: true);
    }
}
