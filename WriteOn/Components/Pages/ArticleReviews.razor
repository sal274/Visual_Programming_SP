@page "/reviews/{ArticleID}"
@rendermode InteractiveServer

@using WriteOn.Components.Layout

@layout MainLayout

@using WriteOn.Models
@using WriteOn.Data

@inject WriteOnDbContext DbContext

<PageTitle>homepage</PageTitle>

<head>
    <link href="css/homepage.css" rel="stylesheet" />
</head>

<div class="homepage-container">
    <div class="article-cards">
        @if (!Reviews.Any())
        {
            <div class="article-card">
                <p>There are no reviews for this article</p>
            </div>
        }
        else
        {
            @foreach (var review in Reviews)
            {
                <div class="article-card">
                    <div class="article-meta">
                        <span>by @review.ReviewerUsername</span>
                        <span class="published-date">published: @review.ReviewDate</span>
                    </div>
                    <div class="article-content">
                        @review.Content
                    </div>
                    <div class="article-footer">
                        <span><a href="/user/@review.ReviewerUsername"><button class="btn-primary">writer
                                    profile</button></a></span>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public required string ArticleID { get; set; }
    public List<ArticleReview>? Reviews { get; set; } = new List<ArticleReview>();

    protected override void OnInitialized()
    {
        try
        {
            Reviews = DbContext.ArticleReviews
                .Where(r => r.ArticleID == ArticleID)
                .ToList();
        }
        catch (InvalidOperationException)
        {
            return;
        }
    }
}
