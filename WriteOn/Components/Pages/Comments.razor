@page "/comments/{ArticleID}"
@rendermode InteractiveServer

@using WriteOn.Components.Layout

@layout MainLayout

@using WriteOn.Models
@using WriteOn.Data

@inject WriteOnDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>comments</PageTitle>

<head>
    <link href="css/commentspage.css" rel="stylesheet" />
</head>

<div class="comment-container">
    <div class="comment-cards">
        <div class="comment-card">
            <form>
                <div class="form-group">
                    <label for="content">add new comment</label>
                    <textarea class="form-control" id="content" name="content" rows="6" @bind="CommentContent" @bind:event="oninput" required></textarea>
                </div>
                <button class="btn btn-primary" @onclick="PostComment">post comment</button>
            </form>
        </div>
        @if (!ArticleComments.Any())
        {
            <div class="comment-card">
                <p>there are no comments for this article; be the first one to write one!</p>
            </div>
        }
        else
        {
            @foreach (var comment in ArticleComments)
            {
                <div class="comment-card">
                    <div class="comment-meta">
                        <span>By @comment.CommenterUsername</span>
                        <span class="published-date">Published: @comment.CommentDate</span>
                    </div>
                    <div class="comment-content">
                        @comment.Content
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public required string ArticleID { get; set; }
    private List<ArticleComment> ArticleComments { get; set; } = new List<ArticleComment>();
    public string CommentContent { get; set; } = string.Empty;
    protected override void OnInitialized()
    {
        try
        {
            ArticleComments = DbContext.ArticleComments
                .Where(c => c.ArticleID == ArticleID)
                .ToList();
        }
        catch (InvalidOperationException)
        {
            return;
        }
    }

    private void PostComment()
    {
        if (String.IsNullOrEmpty(CommentContent))
        {
            return;
        }

        CurrentUserState? CurrentUserInfo = null;
        try
        {
            CurrentUserInfo = DbContext.UserState.FirstOrDefault();
        }
        catch (InvalidOperationException)
        {
            NavigationManager.NavigateTo("login");
            return;
        }

        if (CurrentUserInfo == null)
        {
            NavigationManager.NavigateTo("login");
            return;
        }

        DbContext.ArticleComments.Add(new ArticleComment
            {
                ArticleCommentID = Guid.NewGuid().ToString(),
                ArticleID = ArticleID,
                CommenterUsername = CurrentUserInfo.Username,
                Content = CommentContent,
                CommentDate = DateTime.Today.ToString("d")
            }
        );
        DbContext.SaveChanges();
        CommentContent = string.Empty;
    }
}